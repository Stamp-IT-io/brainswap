#!/bin/bash
# Stamp-IT brainswap  Copyright 2018 Stamp-IT Blockchain Solution inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# Uncomment the following line to turn on debugging
#set -x

# User tweakable values
CONF_PATH="/var/lib/docker/volumes/factom_keys/_data/factomd.conf"
# End of user tweakable values

function usage() {
	echo "Stamp-IT brainswap  Copyright 2018 Stamp-IT Blockchain Solution inc."
	echo
	echo "Uses OpenSSH to brainswap two factomd nodes."
	echo
	echo "Usage:"
	echo "       brainswap [--sudo] [--noswap] [user1@]node1[:port1] [user2@]node2[:port2]"
	echo
	echo "node1 must be an authority node"
	echo "node2 should NOT be an authority node"
	echo
	echo "Tip:"
	echo "   You can add a line in your factomd.conf to mark the place where the brainswap identity should be inserted."
	echo "   Just insert a line that reads (without quotation marks): \"; BRAINSWAP_ID_BELOW\""
	echo "   Otherwise the identity will be insert at the begining of [app] section"
	echo "Tip:"
	echo "   You can use a SSH jump box to connect to a node by prepending user@jumphost to the target node and separating them with comma"
	echo "   e.g.: brainswap user@jumphost,user@authoritynode user@jumphost,user@followernode"
}

SUDO1=
SUDO2=
NOSWAP=

while [ "$1" != "" ]; do
	case "$1" in
	"--help")
		usage
		exit 0
		;;
	"--sudo")
		SUDO1=sudo
		SUDO2=sudo
		;;
	"--sudo1")
		SUDO1=sudo
		;;
	"--sudo2")
		SUDO2=sudo
		;;
	"--noswap")
		NOSWAP=1
		;;
	"--quiet")
		QUIET=1
		;;
	"--debug")
		set -x
		;;
	-*)
		echo "$0: Unknown parameter $1." >&2
		echo "$0 --help for help." >&2
		exit 2
		;;
	*)
		if [ -z "$node1" ]; then
			node1="$1"
		elif [ -z "$node2" ]; then
			node2="$1"
		else
			echo "$0: Too many parameters." >&2
			echo "$0 --help for help." >&2
			exit 2
		fi
		;;
	esac
	shift
done

[ "$QUIET" != 1 ] && echo "Stamp-IT brainswap for factomd" >&2

# Parameters looking good
if [ -z "$node1" -o -z "$node2" ]; then
	usage >&2
	exit 2
fi

j1="${node1%,*}"
if [ -n "$j1" -a "$j1" != "$node1" ]; then
	node1="${node1##*,}"
	jump1="-J $j1"
fi

j2="${node2%,*}"
if [ -n "$j2" -a "$j2" != "$node2" ]; then
	node2="${node2##*,}"
	jump2="-J $j2"
fi

# Extract nodes info (with remote port if specified)
node1_userhost="${node1%:*}"
if echo "$node1" | grep -q -i ":[0-9]*$"; then
	node1_port="-p ${node1#*:}"
else
	node1_port=""
fi

node2_userhost="${node2%:*}"
if echo "$node2" | grep -q -i ":[0-9]*$"; then
	node2_port="-p ${node2#*:}"
else
	node2_port=""
fi

# We do not want to brainswap a node with itself!
if [ "$node1" = "$node2" ]; then
	echo "$0: $node1 and $node2 are the same nodes, cannot brainswap." >&2
	exit 1
fi

# Command to get details about locally running factomd
WGET_DETAILS="wget -q -O - \"http://127.0.0.1:8090/factomd?item=dataDump&value=\""

# sed script to extract useful informations about factomd state
SED_DETAILS_SCRIPT='
  s!.*===SummaryStart===......FNode0\[......\] \(....\).\{22,44\} \([0-9]\{5,7\}\)\[[0-9a-f]\{5,7\}\] \([0-9]\{5,7\}\)/\([0-9]\{5,7\}\)/\([0-9]\{5,7\}\) .../.\(.\).*===SummaryEnd===!\1 \2 \3 \4 \5 \6 __NEXT__!;
  s!__NEXT__.*"NextDump":"===ProcessListStart===[^"]*\(\\u003cnil\\u003e\)[^"]*===ProcessListEnd===!NextNil__RAW__!;
  s!__NEXT__.*"NextDump":"===ProcessListStart===[^"]*===ProcessListEnd===!OK__RAW__!;
  s!__NEXT__!NoNextDump__RAW__!;
  s!__RAW__.*"RawDump":"===ProcessListStart===[^"]*\(\\u003cnil\\u003e\)[^"]*===ProcessListEnd===!RawNil__PREV__!;
  s!__RAW__.*"RawDump":"===ProcessListStart===[^"]*===ProcessListEnd===!OK__PREV__!;
  s!__RAW__!NoRawDump__PREV__!;
  s!__PREV__.*"PrevDump":"===ProcessListStart===[^"]*\(\\u003cnil\\u003e\)[^"]*===ProcessListEnd===.*!PrevNil!;
  s!__PREV__.*"PrevDump":"===ProcessListStart===[^"]*===ProcessListEnd===.*!OK!;
  s!__PREV__.*!NoPrevDump!;
  p'

WGET_HOME="wget -q -O - \"http://127.0.0.1:8090/\""
SED_VERSION_SCRIPT='s!^.*<h1[^>]*>.* <small>\([^<]*\)</small>.*$!\1!p'

# sed script to extract IdentityChainID
SED_ID_SCRIPT='s/^[[:space:]]*IdentityChainID[[:space:]]*=[[:space:]]*\(\([0-9a-z]\)*\)[[:space:]]*$/\1/p'

# sed script to extract ChangeAcksHeight
SED_CAH_SCRIPT='s/^[[:space:]]*ChangeAcksHeight[[:space:]]*=[[:space:]]*\(\([0-9]\)*\)[[:space:]]*$/\1/p'


#########
# Accessing node 1 to obtain some informations...

# Command to login to node1
SSH1="ssh $jump1 $node1_userhost $node1_port"

[ "$QUIET" != 1 ] && echo "Checking $CONF_PATH is writable on $node1..." >&2

# Check that we can connect to node1
if ! $SSH1 $SUDO1 test -w $CONF_PATH; then
	echo "$0: Cannot connect to $node1 or $CONF_PATH not writable." >&2
	exit 1
fi

[ "$QUIET" != 1 ] && echo "Getting $CONF_PATH from $node1..." >&2

# Obtain config from node1
CONF1=$($SSH1 $SUDO1 cat $CONF_PATH)

if [ "$?" -ne 0 ]; then
	echo "$0: Cannot get factomd.conf from $node1." >&2
	exit 1
fi

# Extract Network from node1
NET1=$(echo "$CONF1" | grep -i '^[[:space:]]*Network')
NET1=${NET1:-MAIN}

# Extract Identity from node1
IdCId1=$(echo "$CONF1" | grep -i '^[[:space:]]*IdentityChainID')
LSPrivK1=$(echo "$CONF1" | grep -i '^[[:space:]]*LocalServerPrivKey')
LSPubK1=$(echo "$CONF1" | grep -i '^[[:space:]]*LocalServerPublicKey')
OldCAH1_LINE=$(echo "$CONF1" | grep -i '^[[:space:]]*ChangeAcksHeight')
OldCAH1=$(echo "$OldCAH1_LINE" | sed -n $SED_CAH_SCRIPT)
OldCAH1=${OldCAH1:-0}
Id1=$(echo "$IdCId1" | sed -n $SED_ID_SCRIPT)

# Find the place where the new identity will be inserted in config file (CONF1_APPEND is a sed script)
if echo "$CONF1" | grep -q -i '^[[:space:]]*;*[[:space:]]*BRAINSWAP_ID_BELOW'; then
	CONF1_APPEND='/^[[:space:]]*;*[[:space:]]*BRAINSWAP_ID_BELOW/a\'
else
	if echo "$CONF1" | grep -q -i '^[[:space:]]*\[app\]'; then
		CONF1_APPEND='/^[[:space:]]*\[app\]/a\'
	else
		echo "$0: $node1 factomd.conf has neither [app] section nor commented line with BRAINSWAP_ID_BELOW." >&2
		exit 1
	fi
fi

# Ensure an identiy is in node1 config file
if [ -z "$IdCId1" -o -z "$LSPrivK1" -o -z "$LSPubK1" ]; then
	# Technically, we could do a brainswap, but it is probably not what is intended
	echo "$0: $node1 has incomplete identity set in factomd.conf." >&2
	exit 1
fi

# Ensure $Id1 looks like an identity chain Id
if ! echo "$Id1" | egrep -q "^[0-9a-f]{64}$"; then
	echo "$0: $node1 Id $Id1 does not look like an identity chain Id." >&2
	exit 1
fi

[ "$QUIET" != 1 ] && echo "Getting factomd version from $node1..." >&2

# Obtain factomd version from node1
VERSION1=$($SSH1 $WGET_HOME | sed -n "$SED_VERSION_SCRIPT")

if ! echo "$VERSION1" | grep -q '^v[0-9]*[.][0-9]*[.][0-9]*'; then
	echo "$0: Cannot get factomd version from $node1 (is it running?)" >&2
	exit 1
fi

[ "$QUIET" != 1 ] && echo "Getting factomd details from $node1..." >&2

# Obtain information about factomd from node1
DETAILS=$($SSH1 $WGET_DETAILS | sed -n "$SED_DETAILS_SCRIPT")

if [ "$DETAILS" = "" ]; then
	echo "$0: Cannot get details about factomd from $node1 (is it running?)" >&2
	exit 1
fi

if ! echo "$DETAILS" | egrep '^[^ ]{4} [0-9]* [0-9]* [0-9]* [0-9]* [0-9]' >/dev/null; then
	echo "$0: Cannot parse details about factomd from $node1." >&2
	exit 1
fi

# Extract information about factomd from node1
FLAGS=$(echo "$DETAILS" | cut -d\  -f1)
FLAGS1=$FLAGS
NEXT_HEIGHT1=$(echo "$DETAILS" | cut -d\  -f5)
MINUTE1=$(echo "$DETAILS" | cut -d\  -f6)
PROCESS_LIST=$(echo "$DETAILS" | cut -d\  -f7)

# Ensure node1 is an authority node and operating
if [ "$FLAGS" != "A___" -a "$FLAGS" != "L___" ]; then
	# We could do a brainswap, but it is probably not what is intended
	echo "$0: $node1 is not an authority node (or in ignore mode) no need for brainswap ($FLAGS)." >&2
	exit 1
fi

# Ensure there is no <nil> in the process list of node1
if [ "$PROCESS_LIST" != "OKOKOK" ]; then
	echo "$0: $node1 process list is incomplete, there might be some network instability ($PROCESS_LIST)." >&2
	exit 1
fi

# Ensure $MINUTE1 is a number between 0 and 9
if [ 0 -le "$MINUTE1" -a "$MINUTE1" -le "9" ]; then
	# Here we are sure $MINUTE1 is a number
	true
else
	echo "$0: $node1 minute $MINUTE1, is not a number." >&2
	exit 1
fi

# Ensure $NEXT_HEIGHT1 is a block number
if ! echo "$NEXT_HEIGHT1" | egrep -q "^[0-9]{5,7}$"; then
	echo "$0: $node1 next height $NEXT_HEIGHT1 does not look like a block number." >&2
	exit 1
fi

# Ensure no brainswap is pending on node1
if [ "$NEXT_HEIGHT1" -le "$OldCAH1" ]; then
	echo "$0: $node1 next height $NEXT_HEIGHT1 is not greater than config ChangeAcksHeight $OldCAH1 (pending brainswap?)" >&2
	exit 1
fi

# During minute 0 we cannot tell if the nodes are really following minutes, so we do not initiate a brainswap
if [ "$MINUTE1" -eq "0" ]; then
	echo "$0: $node1 in minute 0, wait for one minute and try again." >&2
	exit 1
fi

#########
# Accessing node 2 to obtain some informations...

# Command to login to node2
SSH2="ssh $jump2 $node2_userhost $node2_port"

[ "$QUIET" != 1 ] && echo "Checking $CONF_PATH is writable on $node2..." >&2

# Check that we can connect to node2
if ! $SSH2 $SUDO2 test -w $CONF_PATH; then
	echo "$0: Cannot connect to $node2 or $CONF_PATH not writable." >&2
	exit 1
fi

[ "$QUIET" != 1 ] && echo "Getting $CONF_PATH from $node2..." >&2

# Obtain config from node2
CONF2=$($SSH2 $SUDO2 cat $CONF_PATH)

if [ "$?" -ne 0 ]; then
	echo "$0: Cannot get factomd.conf from $node2." >&2
	exit 1
fi

# Extract Network from node2
NET2=$(echo "$CONF2" | grep -i '^[[:space:]]*Network')
NET2=${NET2:-MAIN}

# Extract Identity from node2
IdCId2=$(echo "$CONF2" | grep -i '^[[:space:]]*IdentityChainID')
LSPrivK2=$(echo "$CONF2" | grep -i '^[[:space:]]*LocalServerPrivKey')
LSPubK2=$(echo "$CONF2" | grep -i '^[[:space:]]*LocalServerPublicKey')
OldCAH2_LINE=$(echo "$CONF2" | grep -i '^[[:space:]]*ChangeAcksHeight')
OldCAH2=$(echo "$OldCAH2_LINE" | sed -n $SED_CAH_SCRIPT)
OldCAH2=${OldCAH2:-0}
Id2=$(echo "$IdCId2" | sed -n $SED_ID_SCRIPT)

# Ensure node1 and node 2 are on the same network
if [ "$NET1" != "$NET2" ]; then
	echo "$0: $node1 and $node2 are on two different networks, cannot brainswap." >&2
	exit 1
fi

# Find the place where the new identity will be inserted in config file (CONF2_APPEND is a sed script)
if echo "$CONF2" | grep -q -i '^[[:space:]]*;*[[:space:]]*BRAINSWAP_ID_BELOW'; then
	CONF2_APPEND='/^[[:space:]]*;*[[:space:]]*BRAINSWAP_ID_BELOW/a\'
else
	if echo "$CONF2" | grep -q -i '^[[:space:]]*\[app\]'; then
		CONF2_APPEND='/^[[:space:]]*\[app\]/a\'
	else
		echo "$0: $node2 factomd.conf has neither [app] section nor commented line with BRAINSWAP_ID_BELOW." >&2
		exit 1
	fi
fi

# For node2, we do not expect an Identity in config file (but there might be one, it's Ok)...
# ...but we ensure node1 and node 2 have not the same identity in their config files
if [ "$Id1" = "$Id2" ]; then
	echo "$0: $node1 and $node2 have the same identity in their config files. (Same node?)" >&2
	exit 1
fi

[ "$QUIET" != 1 ] && echo "Getting factomd version from $node2..." >&2

# Obtain factomd version from node2
VERSION2=$($SSH2 $WGET_HOME | sed -n "$SED_VERSION_SCRIPT")

if ! echo "$VERSION2" | grep -q '^v[0-9]*[.][0-9]*[.][0-9]*'; then
	echo "$0: Cannot get factomd version from $node2 (is it running?)" >&2
	exit 1
fi

[ "$QUIET" != 1 ] && echo "Getting factomd details from $node2..." >&2

# Obtain information about factomd from node2
DETAILS=$($SSH2 $WGET_DETAILS | sed -n "$SED_DETAILS_SCRIPT")

if [ "$DETAILS" = "" ]; then
	echo "$0: $node2: cannot get details about factomd (is it running?)" >&2
	exit 1
fi

# Extract information about factomd from node2
FLAGS=$(echo "$DETAILS" | cut -d\  -f1)
NEXT_HEIGHT2=$(echo "$DETAILS" | cut -d\  -f5)
MINUTE2=$(echo "$DETAILS" | cut -d\  -f6)
PROCESS_LIST=$(echo "$DETAILS" | cut -d\  -f7)

# Ensure node2 is ready for brainswap
if [ "$FLAGS" != "A___" -a "$FLAGS" != "L___" -a "$FLAGS" != "____" ]; then
	echo "$0: $node2 is not ready for brainswap ($FLAGS)." >&2
	exit 1
fi

# Ensure there is no <nil> in the process list of node2
if [ "$PROCESS_LIST" != "OKOKOK" ]; then
	echo "$0: $node2 process list is incomplete, there might be some network instability ($PROCESS_LIST)." >&2
	exit 1
fi

# Ensure $MINUTE2 is a number between 0 and 9
if [ 0 -le "$MINUTE2" -a "$MINUTE2" -le "9" ]; then
	# Here we are sure $MINUTE2 is a number
	true
else
	echo "$0: $node2 minute $MINUTE2, is not a number." >&2
	exit 1
fi

# Ensure $NEXT_HEIGHT2 is a block number
if ! echo "$NEXT_HEIGHT2" | egrep -q "^[0-9]{5,7}$"; then
	echo "$0: $node2 next height $NEXT_HEIGHT2 does not seem to be a block number." >&2
	exit 1
fi

# Ensure no brainswap is pending on node 2
if [ "$NEXT_HEIGHT2" -le "$OldCAH2" ]; then
	echo "$0: $node2 next height $NEXT_HEIGHT2 not greater than config ChangeAcksHeight $OldCAH2 (pending brainswap?)" >&2
	exit 1
fi

# Ensure node1 and node2 are on the same block height
if [ "$NEXT_HEIGHT1" != "$NEXT_HEIGHT2" ]; then
	echo "$0: $node1 and $node2 are not on the same block (next: $NEXT_HEIGHT1, $NEXT_HEIGHT2) try again in a few seconds." >&2
	exit 1
fi

# Ensure node1 and node2 are on the same minute
if [ "$MINUTE1" != "$MINUTE2" ]; then
	echo "$0: $node1 and $node2 are not on the same minute ($MINUTE1, $MINUTE2) try again in a few seconds." >&2
	exit 1
fi

# Calculate time before swap and ChangeAcksHeight
CHANGE_HEIGHT=$NEXT_HEIGHT1
SWAP_WAIT=$((10 - $MINUTE1))
if [ "$MINUTE1" -eq 9 ]; then
	# If we are on minute 9, we are too close to next block, we wait for one more block
	SWAP_WAIT=$(($SWAP_WAIT + 10))
	CHANGE_HEIGHT=$(($CHANGE_HEIGHT + 1))
fi

if [[ "$VERSION1" < v6.1.1 ]]; then
	CAH1="ChangeAcksHeight = $CHANGE_HEIGHT"
else
	# version >= v6.1.1, ChangeAckHeight must be set to the block before the brainswap
	CAH1="ChangeAcksHeight = $(($CHANGE_HEIGHT-1))"
	echo -e "Using $CAH1 for $node1" >&2
	if [ "$FLAGS1" = "A___" ]; then
		echo -e "WARNING: Brainswaping from an v6.1.1 audit node will probably result in a panic on the destination node." >&2
	fi
fi
if [[ "$VERSION2" < v6.1.1 ]]; then
	CAH2="ChangeAcksHeight = $CHANGE_HEIGHT"
else
	# version >= v6.1.1, ChangeAckHeight must be set to the block before the brainswap
	CAH2="ChangeAcksHeight = $(($CHANGE_HEIGHT-1))"
	echo -e "Using $CAH2 for $node2" >&2
fi

# Generating new factomd.conf for node1
NEWCONF1=$(echo "$CONF1" | grep -i -v '^[[:space:]]*IdentityChainID' | grep -i -v '^[[:space:]]*LocalServerPrivKey' | grep -i -v '^[[:space:]]*LocalServerPublicKey' | grep -i -v '^[[:space:]]*ChangeAcksHeight')
NEWCONF1=$(echo "$NEWCONF1" | sed "$CONF1_APPEND
$IdCId2\\
$LSPrivK2\\
$LSPubK2\\
$CAH1")

if [ "$?" != 0 ]; then
	# Maybe due to a bad factomd.conf
	echo "$0: Error while generating new factomd.conf for node1, aborting." >&2
	exit 1
fi

# Generating new factomd.conf for node2
NEWCONF2=$(echo "$CONF2" | grep -i -v '^[[:space:]]*IdentityChainID' | grep -i -v '^[[:space:]]*LocalServerPrivKey' | grep -i -v '^[[:space:]]*LocalServerPublicKey' | grep -i -v '^[[:space:]]*ChangeAcksHeight')
NEWCONF2=$(echo "$NEWCONF2" | sed "$CONF2_APPEND
$IdCId1\\
$LSPrivK1\\
$LSPubK1\\
$CAH2")

if [ "$?" != 0 ]; then
	# Maybe due to a bad factomd.conf
	echo "$0: Error while generating new factomd.conf for node2, aborting." >&2
	exit 1
fi

####################
# Ready to initiate brainswap
if [ "$QUIET" != 1 ]; then
	echo "Ready to brainswap at block height $CHANGE_HEIGHT, in about $SWAP_WAIT minutes:" >&2
	echo "--------" >&2
	echo "Node1: $node1:" >&2
	echo -e "$IdCId1\n$LSPrivK1\n$LSPubK1" >&2
	echo "--------" >&2
	echo "Node2: $node2:" >&2
	echo -e "$IdCId2\n$LSPrivK2\n$LSPubK2" >&2
	echo "--------" >&2
fi

if [ "$NOSWAP" = "1" ]; then
	echo $0: "--noswap specified, not brainswapping."
	exit 0
fi

# We change node2 first because it is better to have 2 authority nodes than none (factomd might detect this)
[ "$QUIET" != 1 ] && echo "Rewriting factomd.conf on $node2..." >&2

if ! echo "$NEWCONF2" | $SSH2 $SUDO2 sh -c '"cat >'"$CONF_PATH"'"'; then
	echo "$0: Error overwriting $CONF_PATH on $node2, BRAINSWAP FAILED, you must check that config was not overwritten." >&2
	exit 1
fi

[ "$QUIET" != 1 ] && echo "Rewriting factomd.conf on $node1..." >&2

if ! echo "$NEWCONF1" | $SSH1 $SUDO1 sh -c '"cat >'"$CONF_PATH"'"'; then
	echo "$0: Error overwriting $CONF_PATH on $node1, BRAINSWAP FAILED, you must check that both nodes do not have the same identity." >&2
	exit 1
fi

echo "Brainswap initiated successfully for block $CHANGE_HEIGHT, in about $SWAP_WAIT minutes"

exit 0
