#!/usr/bin/env run_bash_test

SELF_DIR="$(dirname "${BASH_SOURCE[0]}")"

CONF_WITHID_BRAINSWAP=$SELF_DIR/files-test-factomd-conf/replace-withid-brainswap.conf
CONF_OTHERID_BRAINSWAP=$SELF_DIR/files-test-factomd-conf/replace-otherid-brainswap.conf
CONF_NOID_BRAINSWAP=$SELF_DIR/files-test-factomd-conf/replace-noid-brainswap.conf
EXPECTED_NODE1_BRAINSWAP=$SELF_DIR/files-test-factomd-conf/replace-expected-node1-full-brainswap.conf
EXPECTED_NODE2_BRAINSWAP=$SELF_DIR/files-test-factomd-conf/replace-expected-node2-full-brainswap.conf
EXPECTED_NODE1_BRAINTRANSPLANT=$SELF_DIR/files-test-factomd-conf/replace-expected-node1-braintransplant.conf
EXPECTED_NODE2_BRAINTRANSPLANT=$SELF_DIR/files-test-factomd-conf/replace-expected-node2-braintransplant.conf

# Most tests won't work if this path changes
EXPECTED_CONF_PATH="/var/lib/docker/volumes/factom_keys/_data/factomd.conf"

source $SELF_DIR/../brainswap.sh

# Tear down after the tests
function _on_exit() {
	docker stop test1 >/dev/null
	docker stop test2 >/dev/null
	docker stop test3 >/dev/null
}
trap _on_exit EXIT

# Setup for the following tests
docker run -d --rm --name test1 -p 2221:22 alpine-dropbear
docker exec test1 mkdir -p "$(dirname "${EXPECTED_CONF_PATH}")"
docker exec -i test1 sh -c "cat >${EXPECTED_CONF_PATH}" <$CONF_WITHID_BRAINSWAP
docker exec -i test1 chmod 600 "${EXPECTED_CONF_PATH}"

docker run -d --rm --name test2 -p 2222:22 alpine-dropbear
docker exec test2 mkdir -p "$(dirname "${EXPECTED_CONF_PATH}")"
docker exec -i test2 sh -c "cat >${EXPECTED_CONF_PATH}" <$CONF_OTHERID_BRAINSWAP
docker exec -i test2 chmod 600 "${EXPECTED_CONF_PATH}"

docker run -d --rm --name test3 -p 2223:22 alpine-dropbear
docker exec test3 mkdir -p "$(dirname "${EXPECTED_CONF_PATH}")"
docker exec -i test3 sh -c "cat >${EXPECTED_CONF_PATH}" <$CONF_NOID_BRAINSWAP
docker exec -i test3 chmod 600 "${EXPECTED_CONF_PATH}"

function brainswap_get_node1_conf_return_false() {
	local node1 node1_IdCId_line node1_IdCId node1_IdCId_short node1_LSPrivK_line node1_LSPrivK node1_LSPubK_line node1_LSPubK node1_CAH_line node1_CAH

	node1=
	run_expect_error 1 brainswap_get_node1_conf

	node1=root@localhost:2299
	run_expect_error 1 brainswap_get_node1_conf
}
brainswap_get_node1_conf_return_false

function brainswap_get_node1_conf_correct() {
	local node1 node1_IdCId_line node1_IdCId node1_IdCId_short node1_LSPrivK_line node1_LSPrivK node1_LSPubK_line node1_LSPubK node1_CAH_line node1_CAH

	# Obtain config from container test1
	node1=root@localhost:2221
	brainswap_get_node1_conf
	run_expect_error 0 [ "$?" == "0" ] # Check return value, cannot use run_expect_error 0 because variables brainswap_get_node1_conf would not be visible here

	run_expect_error 0 [ "$node1_conf" == "$(cat $CONF_WITHID_BRAINSWAP)" ]
	run_expect_error 0 [ "$node1_IdCId_line" == "$(grep ^IdentityChainID <$CONF_WITHID_BRAINSWAP)" ]
	run_expect_error 0 [ "$node1_IdCId" == "8888881234567890123456789012345678901234567890123456789012345678" ]
	run_expect_error 0 [ "$node1_IdCId_short" == "123456" ]
	run_expect_error 0 [ "$node1_LSPrivK_line" == "$(grep ^LocalServerPrivKey <$CONF_WITHID_BRAINSWAP)" ]
	run_expect_error 0 [ "$node1_LSPrivK" == "1234567890123456789012345678901234567890123456789012345678901234" ]
	run_expect_error 0 [ "$node1_LSPubK_line" == "$(grep ^LocalServerPublicKey <$CONF_WITHID_BRAINSWAP)" ]
	run_expect_error 0 [ "$node1_LSPubK" == "9876543210987654321098765432109876543210987654321098765432109876" ]
	run_expect_error 0 [ "$node1_CAH_line" == "$(grep ^ChangeAcksHeight <$CONF_WITHID_BRAINSWAP)" ]
	run_expect_error 0 [ "$node1_CAH" == "87432" ]

	# Obtain config from container test3
	# Also test that variables are correctly overwritten (node1_...)
	node1=root@localhost:2223
	brainswap_get_node1_conf
	run_expect_error 0 [ "$?" == "0" ] # Check return value, cannot use run_expect_error 0 because variables brainswap_get_node1_conf would not be visible here

	run_expect_error 0 [ "$node1_conf" == "$(cat $CONF_NOID_BRAINSWAP)" ]
	run_expect_error 0 [ "$node1_IdCId_line" == "" ]
	run_expect_error 0 [ "$node1_IdCId" == "" ]
	run_expect_error 0 [ "$node1_IdCId_short" == "" ]
	run_expect_error 0 [ "$node1_LSPrivK_line" == "" ]
	run_expect_error 0 [ "$node1_LSPrivK" == "" ]
	run_expect_error 0 [ "$node1_LSPubK_line" == "" ]
	run_expect_error 0 [ "$node1_LSPubK" == "" ]
	run_expect_error 0 [ "$node1_CAH_line" == "" ]
	run_expect_error 0 [ "$node1_CAH" == "0" ]
}
brainswap_get_node1_conf_correct

function brainswap_get_node2_conf_return_false() {
	local node2 node2_IdCId_line node2_IdCId node2_IdCId_short node2_LSPrivK_line node2_LSPrivK node2_LSPubK_line node2_LSPubK node2_CAH_line node2_CAH

	node2=
	run_expect_error 1 brainswap_get_node2_conf

	node2=root@localhost:2299
	run_expect_error 1 brainswap_get_node2_conf
}
brainswap_get_node2_conf_return_false

function brainswap_get_node2_conf_correct() {
	local node2 node2_IdCId_line node2_IdCId node2_IdCId_short node2_LSPrivK_line node2_LSPrivK node2_LSPubK_line node2_LSPubK node2_CAH_line node2_CAH

	# Obtain config from container test2
	node2=root@localhost:2222
	brainswap_get_node2_conf
	run_expect_error 0 [ "$?" == "0" ] # Check return value, cannot use run_expect_error 0 because variables brainswap_get_node1_conf would not be visible here

	run_expect_error 0 [ "$node2_conf" == "$(cat $CONF_OTHERID_BRAINSWAP)" ]
	run_expect_error 0 [ "$node2_IdCId_line" == "$(grep ^IdentityChainID <$CONF_OTHERID_BRAINSWAP)" ]
	run_expect_error 0 [ "$node2_IdCId" == "8888886789012345678901234567890123456789012345678901234567890123" ]
	run_expect_error 0 [ "$node2_IdCId_short" == "678901" ]
	run_expect_error 0 [ "$node2_LSPrivK_line" == "$(grep ^LocalServerPrivKey <$CONF_OTHERID_BRAINSWAP)" ]
	run_expect_error 0 [ "$node2_LSPrivK" == "6789012345678901234567890123456789012345678901234567890123456789" ]
	run_expect_error 0 [ "$node2_LSPubK_line" == "$(grep ^LocalServerPublicKey <$CONF_OTHERID_BRAINSWAP)" ]
	run_expect_error 0 [ "$node2_LSPubK" == "4321098765432109876543210987654321098765432109876543210987654321" ]
	run_expect_error 0 [ "$node2_CAH_line" == "$(grep ^ChangeAcksHeight <$CONF_OTHERID_BRAINSWAP)" ]
	run_expect_error 0 [ "$node2_CAH" == "87432" ]
}
brainswap_get_node2_conf_correct


# Testing a brainswap that fails because the user cannot overwrite config
function brainswap_do_brainswap_fails_no_access_node1() {
	local node1_conf node1_IdCId node1_LSPrivK node1_LSPubK node2_conf node2_IdCId node2_LSPrivK node2_LSPubK sudo1 sudo2

	### Arrange
	# These variables must be set because brainswap_do_brainswap calls brainswap_calculate_swap_wait_minutes
	node1_factomd_minute=3
	node1_factomd_nextheight=99997

	# Set variables required by brainswap_do_brainswap directly (we delegate this task to brainswap_get_*_conf)
	sudo1=
	sudo2=
	node1=root@localhost:2221
	brainswap_get_node1_conf
	exit_if_failed "brainswap_get_node1_conf failed"
	node2=root@localhost:2222
	brainswap_get_node2_conf
	exit_if_failed "brainswap_get_node2_conf failed"

	# Use an unprivileged user to make brainswap fail
	node1=user@localhost:2221

	### Act
	(brainswap_do_brainswap 99999 &>/dev/null)	# Subshell to avoid exit

	### Assert
	run_expect_error 0 [ "$?" -ge 1 ]	# Depending on the shell there can be different return values (bash returns 1, dash returns 2)
}
brainswap_do_brainswap_fails_no_access_node1

# Testing a full brainswap (with an identity set in each config file)
function brainswap_do_brainswap_full_correct() {
	local node1_conf node1_IdCId node1_LSPrivK node1_LSPubK node2_conf node2_IdCId node2_LSPrivK node2_LSPubK sudo1 sudo2

	### Arrange
	# These variables must be set because brainswap_do_brainswap calls brainswap_calculate_swap_wait_minutes
	node1_factomd_minute=3
	node1_factomd_nextheight=99997

	# Set variables required by brainswap_do_brainswap directly (we delegate this task to brainswap_get_*_conf)
	sudo1=--sudo
	sudo2=
	node1=user@localhost:2221
	brainswap_get_node1_conf
	exit_if_failed "brainswap_get_node1_conf failed"
	node2=root@localhost:2222
	brainswap_get_node2_conf
	exit_if_failed "brainswap_get_node2_conf failed"

	### Act
	run_expect_error 0 brainswap_do_brainswap 99997

	### Assert
	run_expect_output "$(cat $EXPECTED_NODE1_BRAINSWAP)" docker exec -i test1 sh -c "cat ${EXPECTED_CONF_PATH}"
	run_expect_output "$(cat $EXPECTED_NODE2_BRAINSWAP)" docker exec -i test2 sh -c "cat ${EXPECTED_CONF_PATH}"
	# Reading config files again to check ChangeAcksHeight
	brainswap_get_node1_conf
	exit_if_failed "2nd brainswap_get_node1_conf failed"
	brainswap_get_node2_conf
	exit_if_failed "2nd brainswap_get_node2_conf failed"
	run_expect_output 99997 echo "$node1_CAH"
	run_expect_output 99997 echo "$node2_CAH"
}
brainswap_do_brainswap_full_correct

# Testing a braintransplant (first node with an identity set, the other without an ID)
function brainswap_do_braintransplant_correct() {
	local node1_conf node1_IdCId node1_LSPrivK node1_LSPubK node2_conf node2_IdCId node2_LSPrivK node2_LSPubK sudo1 sudo2

	### Arrange
	# These variables must be set because brainswap_do_brainswap calls brainswap_calculate_swap_wait_minutes
	node1_factomd_minute=3
	node1_factomd_nextheight=99998

	# Set variables required by brainswap_do_brainswap directly
	sudo1=
	sudo2=--sudo
	node1=root@localhost:2221
	brainswap_get_node1_conf
	exit_if_failed "brainswap_get_node1_conf failed"
	node2=user@localhost:2223
	brainswap_get_node2_conf
	exit_if_failed "brainswap_get_node2_conf failed"

	### Act
	run_expect_error 0 brainswap_do_brainswap 99998

	### Assert
	run_expect_output "$(cat $EXPECTED_NODE1_BRAINTRANSPLANT)" docker exec -i test1 sh -c "cat ${EXPECTED_CONF_PATH}"
	run_expect_output "$(cat $EXPECTED_NODE2_BRAINTRANSPLANT)" docker exec -i test3 sh -c "cat ${EXPECTED_CONF_PATH}"
	# Reading config files again to check ChangeAcksHeight
	brainswap_get_node1_conf
	exit_if_failed "2nd brainswap_get_node1_conf failed"
	brainswap_get_node2_conf
	exit_if_failed "2nd brainswap_get_node2_conf failed"
	run_expect_output 99998 echo "$node1_CAH"
	run_expect_output 99998 echo "$node2_CAH"
}
brainswap_do_braintransplant_correct


# Testing a brainswap that fails because the user cannot overwrite config on second node
# At the end of this test, both nodes have the same identity, but brainswap_do_brainswap should return an error
function brainswap_do_brainswap_fails_no_access_node2() {
	local node1_conf node1_IdCId node1_LSPrivK node1_LSPubK node2_conf node2_IdCId node2_LSPrivK node2_LSPubK sudo1 sudo2

	### Arrange
	# These variables must be set because brainswap_do_brainswap calls brainswap_calculate_swap_wait_minutes
	node1_factomd_minute=3
	node1_factomd_nextheight=99999

	# Set variables required by brainswap_do_brainswap directly
	sudo1=
	sudo2=
	node1=root@localhost:2223
	brainswap_get_node1_conf
	exit_if_failed "brainswap_get_node1_conf failed"
	node2=root@localhost:2221
	brainswap_get_node2_conf
	exit_if_failed "brainswap_get_node2_conf failed"

	# Use an unprivileged user to make brainswap fail
	node2=user@localhost:2223

	### Act
	(brainswap_do_brainswap 99999 &>/dev/null)	# Subshell to avoid exit

	### Assert
	run_expect_error 0 [ "$?" -ge 1 ]	# Depending on the shell there can be different return values (bash returns 1, dash returns 2)
}
brainswap_do_brainswap_fails_no_access_node2

