#!/usr/bin/env run_bash_test

SELF_DIR="$(dirname "${BASH_SOURCE[0]}")"

CONF_TESTNET_IDS1_DOS=$SELF_DIR/files-test-factomd-conf/testnet-id1-dos.conf
CONF_TESTNET_NOCAH=$SELF_DIR/files-test-factomd-conf/testnet-id1-nocah.conf
CONF_TESTNET_NOID_DOS=$SELF_DIR/files-test-factomd-conf/testnet-noid-dos.conf
CONF_TESTNET_BADID1=$SELF_DIR/files-test-factomd-conf/testnet-badid1.conf
CONF_TESTNET_BADID2=$SELF_DIR/files-test-factomd-conf/testnet-badid2.conf
CONF_TESTNET_BADPRIV=$SELF_DIR/files-test-factomd-conf/testnet-badpriv.conf
CONF_TESTNET_BADPUB=$SELF_DIR/files-test-factomd-conf/testnet-badpub.conf
CONF_TESTNET_BADCAH=$SELF_DIR/files-test-factomd-conf/testnet-badcah.conf

# Most tests won't work if this path changes
EXPECTED_CONF_PATH="/var/lib/docker/volumes/factom_keys/_data/factomd.conf"

source $SELF_DIR/../ssh.sh
source $SELF_DIR/../factomd-conf.sh

# Tear down after the tests
function _on_exit() {
	docker stop test1 >/dev/null
	docker stop test2 >/dev/null
	docker stop test3 >/dev/null
	docker stop test4 >/dev/null
	docker stop test5 >/dev/null
}
trap _on_exit EXIT

# Setup for the following tests
docker run -d --rm --name test1 -p 2221:22 alpine-dropbear
docker exec test1 mkdir -p "$(dirname "${EXPECTED_CONF_PATH}")"

docker run -d --rm --name test2 -p 2222:22 alpine-dropbear
docker exec test2 mkdir -p "$(dirname "${EXPECTED_CONF_PATH}")"
docker exec -i test2 sh -c "cat >${EXPECTED_CONF_PATH}" <$CONF_TESTNET_IDS1_DOS
docker exec -i test2 chmod 600 "${EXPECTED_CONF_PATH}"

docker run -d --rm --name test3 -p 2223:22 alpine-dropbear
docker exec test3 mkdir -p "$(dirname "${EXPECTED_CONF_PATH}")"
docker exec -i test3 sh -c "cat >${EXPECTED_CONF_PATH}" <$CONF_TESTNET_NOID_DOS
docker exec -i test3 chmod 600 "${EXPECTED_CONF_PATH}"

docker run -d --rm --name test4 -p 2224:22 alpine-dropbear
docker exec test4 mkdir -p "$(dirname "${EXPECTED_CONF_PATH}")"
docker exec -i test4 sh -c "cat >${EXPECTED_CONF_PATH}" <$CONF_TESTNET_NOCAH
docker exec -i test4 chmod 600 "${EXPECTED_CONF_PATH}"

docker run -d --rm --name test5 -p 2225:22 alpine-dropbear
docker exec test5 mkdir -p "$(dirname "${EXPECTED_CONF_PATH}")"

# Tests
function get_path_output_ok() {
	# Most tests won't work if this path changes
        run_expect_output $EXPECTED_CONF_PATH get_factomd_conf_path root@localhost:2220
}
get_path_output_ok

function get_path_return_false() {
        run_expect_error 1 get_factomd_conf_path
        run_expect_error 1 get_factomd_conf_path @
        run_expect_error 1 get_factomd_conf_path toto@
}
get_path_return_false

function no_remote_return_false() {
        run_expect_error 1 get_factomd_keys root@localhost:2220
        run_expect_error 1 ensure_factomd_conf_writable root@localhost:2220
}
no_remote_return_false

function no_conf_return_false() {
        run_expect_error 1 get_factomd_keys root@localhost:2221
        run_expect_error 1 ensure_factomd_conf_writable root@localhost:2221
}
no_conf_return_false


function mod_600_return_true() {
        run_expect_error 0 get_factomd_conf root@localhost:2222
        run_expect_error 0 get_factomd_keys root@localhost:2222
        run_expect_error 0 ensure_factomd_conf_writable root@localhost:2222
}
mod_600_return_true

function get_factomd_conf_output_ok() {
	local output

	run_expect_output "$(cat $CONF_TESTNET_IDS1_DOS)" get_factomd_conf root@localhost:2222
}
get_factomd_conf_output_ok

function extract_factomd_keys_sets_variables_correctly_with_prefix() {
        extract_conf_keys eprefixid <$CONF_TESTNET_IDS1_DOS
        extract_conf_keys eprefixnoid <$CONF_TESTNET_NOID_DOS
        extract_conf_keys eprefixnocah <$CONF_TESTNET_NOCAH

	run_expect_error 0 [ "$eprefixid_IdCId_line" == "$(grep ^IdentityChainID <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$eprefixid_IdCId" == "8888881234567890123456789012345678901234567890123456789012345678" ]
	run_expect_error 0 [ "$eprefixid_IdCId_short" == "123456" ]
	run_expect_error 0 [ "$eprefixid_LSPrivK_line" == "$(grep ^LocalServerPrivKey <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$eprefixid_LSPrivK" == "1234567890123456789012345678901234567890123456789012345678901234" ]
	run_expect_error 0 [ "$eprefixid_LSPubK_line" == "$(grep ^LocalServerPublicKey <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$eprefixid_LSPubK" == "9876543210987654321098765432109876543210987654321098765432109876" ]
	run_expect_error 0 [ "$eprefixid_CAH_line" == "$(grep ^ChangeAcksHeight <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$eprefixid_CAH" == "87432" ]

	run_expect_error 0 [ "$eprefixnoid_IdCId_line" == "" ]
	run_expect_error 0 [ "$eprefixnoid_IdCId" == "" ]
	run_expect_error 0 [ "$eprefixnoid_IdCId_short" == "" ]
	run_expect_error 0 [ "$eprefixnoid_LSPrivK_line" == "" ]
	run_expect_error 0 [ "$eprefixnoid_LSPrivK" == "" ]
	run_expect_error 0 [ "$eprefixnoid_LSPubK_line" == "" ]
	run_expect_error 0 [ "$eprefixnoid_LSPubK" == "" ]
	run_expect_error 0 [ "$eprefixnoid_CAH_line" == "$(grep ^ChangeAcksHeight <$CONF_TESTNET_NOID_DOS)" ]
	run_expect_error 0 [ "$eprefixnoid_CAH" == "87432" ]

	run_expect_error 0 [ "$eprefixnocah_CAH_line" == "" ]
	run_expect_error 0 [ "$eprefixnocah_CAH" == "0" ]
}
extract_factomd_keys_sets_variables_correctly_with_prefix

function extract_factomd_keys_sets_variables_correctly_without_prefix() {
	_IdCId_line=
	_IdCId=
	_IdCId_short=
	_LSPrivK_line=
	_LSPrivK=
	_LSPubK_line=
	_LSPubK=
	_CAH_line=
	_CAH=
        extract_conf_keys <$CONF_TESTNET_IDS1_DOS

	run_expect_error 0 [ "$_IdCId_line" == "$(grep ^IdentityChainID <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$_IdCId" == "8888881234567890123456789012345678901234567890123456789012345678" ]
	run_expect_error 0 [ "$_IdCId_short" == "123456" ]
	run_expect_error 0 [ "$_LSPrivK_line" == "$(grep ^LocalServerPrivKey <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$_LSPrivK" == "1234567890123456789012345678901234567890123456789012345678901234" ]
	run_expect_error 0 [ "$_LSPubK_line" == "$(grep ^LocalServerPublicKey <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$_LSPubK" == "9876543210987654321098765432109876543210987654321098765432109876" ]
	run_expect_error 0 [ "$_CAH_line" == "$(grep ^ChangeAcksHeight <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$_CAH" == "87432" ]
}
extract_factomd_keys_sets_variables_correctly_without_prefix

function get_factomd_keys_sets_variables_correctly_with_prefix() {
        get_factomd_keys root@localhost:2222 gprefixid
        get_factomd_keys root@localhost:2223 gprefixnoid
        get_factomd_keys root@localhost:2224 gprefixnocah

	run_expect_error 0 [ "$gprefixid_IdCId_line" == "$(grep ^IdentityChainID <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$gprefixid_IdCId" == "8888881234567890123456789012345678901234567890123456789012345678" ]
	run_expect_error 0 [ "$gprefixid_IdCId_short" == "123456" ]
	run_expect_error 0 [ "$gprefixid_LSPrivK_line" == "$(grep ^LocalServerPrivKey <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$gprefixid_LSPrivK" == "1234567890123456789012345678901234567890123456789012345678901234" ]
	run_expect_error 0 [ "$gprefixid_LSPubK_line" == "$(grep ^LocalServerPublicKey <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$gprefixid_LSPubK" == "9876543210987654321098765432109876543210987654321098765432109876" ]
	run_expect_error 0 [ "$gprefixid_CAH_line" == "$(grep ^ChangeAcksHeight <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$gprefixid_CAH" == "87432" ]

	run_expect_error 0 [ "$gprefixnoid_IdCId_line" == "" ]
	run_expect_error 0 [ "$gprefixnoid_IdCId" == "" ]
	run_expect_error 0 [ "$gprefixnoid_IdCId_short" == "" ]
	run_expect_error 0 [ "$gprefixnoid_LSPrivK_line" == "" ]
	run_expect_error 0 [ "$gprefixnoid_LSPrivK" == "" ]
	run_expect_error 0 [ "$gprefixnoid_LSPubK_line" == "" ]
	run_expect_error 0 [ "$gprefixnoid_LSPubK" == "" ]
	run_expect_error 0 [ "$gprefixnoid_CAH_line" == "$(grep ^ChangeAcksHeight <$CONF_TESTNET_NOID_DOS)" ]
	run_expect_error 0 [ "$gprefixnoid_CAH" == "87432" ]

	run_expect_error 0 [ "$gprefixnocah_CAH_line" == "" ]
	run_expect_error 0 [ "$gprefixnocah_CAH" == "0" ]
}
get_factomd_keys_sets_variables_correctly_with_prefix

function get_factomd_keys_sets_variables_correctly_without_prefix() {
	_IdCId_line=
	_IdCId=
	_IdCId_short=
	_LSPrivK_line=
	_LSPrivK=
	_LSPubK_line=
	_LSPubK=
	_CAH_line=
	_CAH=
        get_factomd_keys root@localhost:2222

	run_expect_error 0 [ "$_IdCId_line" == "$(grep ^IdentityChainID <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$_IdCId" == "8888881234567890123456789012345678901234567890123456789012345678" ]
	run_expect_error 0 [ "$_IdCId_short" == "123456" ]
	run_expect_error 0 [ "$_LSPrivK_line" == "$(grep ^LocalServerPrivKey <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$_LSPrivK" == "1234567890123456789012345678901234567890123456789012345678901234" ]
	run_expect_error 0 [ "$_LSPubK_line" == "$(grep ^LocalServerPublicKey <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$_LSPubK" == "9876543210987654321098765432109876543210987654321098765432109876" ]
	run_expect_error 0 [ "$_CAH_line" == "$(grep ^ChangeAcksHeight <$CONF_TESTNET_IDS1_DOS)" ]
	run_expect_error 0 [ "$_CAH" == "87432" ]
}
get_factomd_keys_sets_variables_correctly_without_prefix

function get_factomd_keys_detects_bad_id_and_keys() {
	docker exec -i test5 sh -c "cat >${EXPECTED_CONF_PATH}" <$CONF_TESTNET_BADID1
        run_expect_error 1 get_factomd_keys root@localhost:2225

	docker exec -i test5 sh -c "cat >${EXPECTED_CONF_PATH}" <$CONF_TESTNET_BADID2
        run_expect_error 1 get_factomd_keys root@localhost:2225

	docker exec -i test5 sh -c "cat >${EXPECTED_CONF_PATH}" <$CONF_TESTNET_BADPRIV
        run_expect_error 1 get_factomd_keys root@localhost:2225

	docker exec -i test5 sh -c "cat >${EXPECTED_CONF_PATH}" <$CONF_TESTNET_BADPUB
        run_expect_error 1 get_factomd_keys root@localhost:2225

	docker exec -i test5 sh -c "cat >${EXPECTED_CONF_PATH}" <$CONF_TESTNET_BADCAH
        run_expect_error 1 get_factomd_keys root@localhost:2225

}
get_factomd_keys_detects_bad_id_and_keys

function put_factomd_conf_works_correctly() {
	docker exec -i test5 sh -c "rm -f ${EXPECTED_CONF_PATH}"

	# Create a new config file
        run_expect_error 0 put_factomd_conf root@localhost:2225 "$(cat $CONF_TESTNET_BADID2)"
	run_expect_output "$(cat $CONF_TESTNET_BADID2)" docker exec -i test5 sh -c "cat $(get_factomd_conf_path root@localhost:2225)"

	# Overwrite config file
        run_expect_error 0 put_factomd_conf root@localhost:2225 "$(cat $CONF_TESTNET_BADPRIV)"
	run_expect_output "$(cat $CONF_TESTNET_BADPRIV)" docker exec -i test5 sh -c "cat $(get_factomd_conf_path root@localhost:2225)"
}
put_factomd_conf_works_correctly


function put_factomd_conf_cannot_write() {
	# user account should not be able to overwrite
        run_expect_error 1 put_factomd_conf user@localhost:2225 "$(cat $CONF_TESTNET_BADID2)"
}
put_factomd_conf_cannot_write

